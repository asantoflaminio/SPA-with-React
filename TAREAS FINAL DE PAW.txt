TAREAS FINAL DE PAW:

Consigna:
"Hacer uso de Jersey para la creación de una API REST que sirva a una single page application con AngularJS y RequireJS"
* poseer una arquitectura según Domain Driven Design
* test unitarios de front y back (Karma)
* El frontend debe ser exclusivamente utilizando AngularJS contra una REST API creada con Jersey. El uso de vistas o controllers de Spring está  prohibido.
* Seguridad usando Spring Security
* Hibernate como proveedor de JPA
* Reemplazar el uso de spring webmvc de las iteraciones anteriores en favor de AngularJS y Jersey sin perdida de
funcionalidad ni información en el servidor. La aplicación web debe estar optimizada para dar buenos tiempos de carga, haciendo uso de
las múltiples técnicas vistas en clase: RequireJS, Minificacion y file revving + cache incondicional.

Correcciones a nuestra segunda entrega:

FUNCIONAMIENTO
- campo del telefono en el registro no esta marcado como obligatorio pero si validado como tal
- dimension de casa limitada a 3 caracters, deberia ser mas
- form de admin es confuso, no dice q es lo q estas agregando. Hay 3 formularios en una pagina.
- Disenio se rompe. More info > se cae de la caja.
- Por defecto no hay ningun orden en los resultados. Deberia haber mejor default.
- Busqueda por superficie maxima no funciona. Filtro se muestra como min:, no se tran resultados, pero no se muestra zero result page.
- no hay forma rapida de limpiar todos los filtros
- Clickear ir a la pagina siguiente si no hay mas produce error oops con status 200.
- Descripcion de publicacion no permita comas ni puntos
- Form de publicacion acepta texto en campos de# de cocheras etc. Validaciones hechas en backend pero UI no ayuda.
- Form de publicacion dice q banios puede contener letras o numeros pero en realidd solo acpeta numeros. 
- Form de publicacion pierde nro de cocheras ante clqer error. 
- Al enviar mensaje por propiedad se lo recibe por triplicado.
- Modal de confirmacion para borrar propiedad se pisa con resto de la pagina. Esperaria overlay o similar. Botones de confirmar y cancelar tienen misma jerarquia.
- Falta funcionalidad basica: ver resultados en mapa, trabajar en pesos los valores de alquileres, mas detalles en propiedades (sup cubiertas o no, balcones, bauleras, amenities, etc)
- Filtros solo se despleigan al clickear la flechita
- Paginacion permite irnos mas alla de la ultima pagina
- Problemas de encoding con data que viene de la base de datos
- Search solo filtra por barrio


CODIGO
- Tests estan mal (asumo qde todas formas eso se reemplaza todo)
- EnumContainer es una clase q solo tiene 3 enums.
- Aunq hay enums para Operation y Propery Type en otros lados se sigue usando String
- Hay metodos @PostConstruct vacios
- SpringMessageServiceImp tiene setLocale. Es llamado desde distintos lados y puede dar ugar a distintos textos en distintos idiomas.
- cuerpo de mails hardcodeado. interplacion de variables con replaceAll.
- MailServiceImpl.getHTML mantiene estructura de directiorios de desarrollo. Viola capas pq accede de services a webapp.
- No programan contra interfaces. Varios metodos retornan HashMap donde Map deberia bastar. 
- UserDao como @Service, no es semantico.
- Incluyen archivos autogenerados.
- Textos en JSPs no internacionalizados.
- Metodos que no usan @Override, perdiendo checks en compliacion. 
- Subject de los mails hardcodeados, ni tampoco internacionalizado.


Otras correcciones que conocemos:
- Tema en los campos no acepta enies ni tildes. 
- Una vez arreglado eso faltaria agregar barrios como nuniez en CABA, muniz a san migel, villa espania a berazategui
- Permitir al usuario eliminar su cuenta